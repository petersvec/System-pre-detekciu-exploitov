/*
 * Copyright (C) 2017 Lukas Lences
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package tismacore;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import tismacore.helpers.Computer;
import tismacore.helpers.TLogger;
import tismacore.helpers.TProperties;

/**
 *
 * @author Lukas Lences
 */
public class AggregatedNetFlow {
    private final static Logger LOGGER = Logger.getLogger(TLogger.class.getName());
    Date startTime, endTime;
    String sourceIP, label;
    int uniqSourcePorts, uniqDestIp, uniqDestPorts, amounOfNetflows,
            amountOfPackets;
    Long amountOfbytes; 
    
    HashSet<Long> sourcePorts;
    HashSet<Long> destPorts;
    HashSet<String> destIps;
    ArrayList<Netflow> netflows;
    
    AggregatedNetFlow(Netflow nf){
        netflows = new ArrayList<>();
        netflows.add(nf);
        startTime = nf.date;
        endTime = Computer.getEndTime(startTime, TProperties.aggregationWindowWidth);
        sourceIP = nf.sip;
        parseNewValues(nf);
        
        LOGGER.log(Level.FINEST, "New aggregated flow created. Start time: " + startTime + " End time: " + endTime);
    }
    
    void update(Netflow nf){
        updateValues(nf);
        LOGGER.log(Level.FINEST, "Aktualizovany agregovany flow.");
    }
    
    private void parseNewValues(Netflow nf){
        sourcePorts = new HashSet<>();
        destPorts = new HashSet<>();
        destIps = new HashSet<>();
        
        String[] data = nf.content.split("\t");
        sourcePorts.add(Long.parseLong(data[4]));
        uniqSourcePorts = 1;
        
        destIps.add(data[6]);
        uniqDestIp = 1;
        
        destPorts.add(Long.parseLong(data[7]));
        uniqDestPorts = 1;
        
        amountOfPackets = Integer.parseInt(data[8]);
        amountOfbytes = Long.parseLong(data[9]);
        amounOfNetflows = Integer.parseInt(data[10]);
   
        if (TProperties.mode.compareTo("train") == 0){
        label = data[11];
        }
    }
    
    private void updateValues(Netflow nf){
        String[] data = nf.content.split("\t");
        Long tmpSPort = Long.parseLong(data[4]);
        if (!(sourcePorts.contains(tmpSPort))){
                sourcePorts.add(tmpSPort);     
                uniqSourcePorts++;
        }
        
        String tmpDestIp = data[6];
        if (!(destIps.contains(tmpDestIp))){
                destIps.add(tmpDestIp);     
                uniqDestIp++;
        }
        
        Long tmpDPort = Long.parseLong(data[7]);
        if (!(destPorts.contains(tmpDPort))){
                destPorts.add(tmpDPort);     
                uniqDestPorts++;
        }
        
        amountOfPackets += Integer.parseInt(data[8]);
        amountOfbytes += Long.parseLong(data[9]);
        amounOfNetflows += Integer.parseInt(data[10]);
        netflows.add(nf);
        printFlowStats();
    }
    
    void printFlowStats(){
        String message = "Aggregated flow: Source: " + sourceIP + " USPo: " 
                + uniqSourcePorts + " UDIP: " + uniqDestIp + " UDPo: " 
                + uniqDestPorts + " NetFlows: " + amounOfNetflows + " Packets: " 
                + amountOfPackets + " Bytes: " + amountOfbytes;
        LOGGER.log(Level.FINEST, message);
    }
}
