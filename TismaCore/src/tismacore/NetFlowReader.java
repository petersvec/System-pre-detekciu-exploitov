/*
 * Copyright (C) 2017 Lukas Lences
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package tismacore;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import tismacore.helpers.Reader;
import tismacore.helpers.TLogger;
import tismacore.helpers.TProperties;
import weka.core.Instance;

/**
 *
 * @author Lukas Lences
 */
public class NetFlowReader implements Runnable {

    private final static Logger LOGGER = Logger.getLogger(TLogger.class.getName());
    String filename;
    ArrayList<TimeWindow> tws;
    Thread t;

    NetFlowReader(String file) {
        filename = file;
        t = new Thread(this);
    }

    public void run() {
        start();
        synchronized (TismaCore.s) {
            TismaCore.s.release();
        }
    }

    //NetFlowReader(String file) throws Exception{
    //filename = file;
    private void start() {
        readLines();

        if (TProperties.mode.compareTo("train") == 0) {
            for (TimeWindow tw : tws) {
                tw.startCinnosti();
            }
        } else {
            int idTw = 0;
            for (TimeWindow tw : tws) {                
                HashSet<String> botnetIpInTW = new HashSet<>();
                tw.startCinnosti();
                TJRIP tjrip;
                TREPTree trep;
             
                tw.tcluster.datasetOut.setClassIndex(tw.tcluster.datasetOut.numAttributes() - 1);
                double botnet = new Double(0);
                for (int i = 0; i < tw.tcluster.datasetOut.size(); i++) {
                    try {
                        Instance inx = tw.tcluster.datasetOut.instance(i);
                        Double classClastra = 0.0;
                        if (TProperties.algorithm.compareToIgnoreCase("jrip") == 0) {
                            tjrip = new TJRIP();
                            classClastra = tjrip.jrip.classifyInstance(inx);
                        } else if (TProperties.algorithm.compareToIgnoreCase("reptree") == 0) {
                            trep = new TREPTree();
                            classClastra = trep.trep.classifyInstance(inx);
                        }

                        //celu tu triedu teraz spatne vsetkym v tom klastri
                        tw.tcluster.clusterClasses[i]
                                = (classClastra.compareTo(botnet) == 0) ? "botnet" : "other";                        
                    } catch (Exception ex) {
                        LOGGER.log(Level.SEVERE, null, ex);
                    }
                }
                for (int i = 0; i < tw.tcluster.inputTismaInstances.size(); i++) {
                    try {
                        Tinstance ti = tw.tcluster.inputTismaInstances.get(i);
                        Instance inx = ti.instance;
                        int id = tw.tcluster.clusterer.clusterInstance(inx);
                        ti.aggregatedNetFlow.label = tw.tcluster.clusterClasses[id];

for (Netflow nf : ti.aggregatedNetFlow.netflows){
    nf.content = nf.content + "\t" + ti.aggregatedNetFlow.label;
}                        
                        if (ti.aggregatedNetFlow.label.compareTo("botnet") == 0) {
                            String source = ti.aggregatedNetFlow.sourceIP;
                            botnetIpInTW.add(source);
                            if (TismaCore.botnetIpaddrsMap.containsKey(source)) {
                                int oldValue = TismaCore.botnetIpaddrsMap.get(source);
                                TismaCore.botnetIpaddrsMap.replace(source, oldValue, oldValue + 1);
                            } else {
                                TismaCore.botnetIpaddrsMap.put(source, 1);
                            }
                        }
                    } catch (Exception ex) {
                        LOGGER.log(Level.SEVERE, null, ex);
                    }
                }
                Reader.printNetflowsToFile(tw.netFlows, filename);
                Reader.sendBotnetIpToQueue(filename, botnetIpInTW, Integer.toString(idTw));
                idTw++;
            }
            
            if (!(TismaCore.botnetIpaddrsMap.isEmpty())){
            Reader.printBotnetIpToFile(filename);
            Reader.sendBotnetIpToQueue(filename, "ALL_IN_FILE");           
            }            
        }
    }

    private void readLines() {
        tws = new ArrayList<>();
        try {
            LOGGER.log(Level.INFO, "Reading instances from file: " + filename);
            BufferedReader br = new BufferedReader(new FileReader(filename));
            String line;
            //prvy time window
            line = br.readLine();
            Netflow netflow = new Netflow(line);
            TimeWindow TW = new TimeWindow(filename, netflow);
            tws.add(TW);
            //vsetky ostatne
            while ((line = br.readLine()) != null) {
                netflow = new Netflow(line);
                if (netflow.date.before(TW.endTime)) {
                    TW.addNetFlow(netflow);
                } else {
                    TW = new TimeWindow(filename, netflow);
                    tws.add(TW);
                }
            }
        } catch (FileNotFoundException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        }
    }
}
