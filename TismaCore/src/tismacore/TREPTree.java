/*
 * Copyright (C) 2017 Lukas Lences
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package tismacore;

import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import tismacore.helpers.Reader;
import tismacore.helpers.TLogger;
import tismacore.helpers.TProperties;
import weka.classifiers.Classifier;
import weka.classifiers.trees.REPTree;
import weka.core.Instances;
import weka.core.converters.ConverterUtils;

/**
 *
 * @author Lukas Lences
 */
public class TREPTree {

    private final static Logger LOGGER = Logger.getLogger(TLogger.class.getName());
    REPTree trep;
    Instances dataset;

    TREPTree(String pathToInstances) {
        try {
            ArrayList<String> files = Reader.readFilesInDirectory(pathToInstances);
            trep = new REPTree();
            trep.setSeed(1);
            for (String f : files) {
                if (f.endsWith(".arff")) {
                    LOGGER.log(Level.FINE, "Reading instances from file: " + f);
                    Instances tempData = ConverterUtils.DataSource.read(f);
                    if (this.dataset == null) {
                        this.dataset = tempData;
                    } else {
                        this.dataset.addAll(tempData);
                    }
                }
            }
            dataset.setClassIndex(dataset.numAttributes() - 1);

            Reader.saveInstancesToFile("REPTreeInstances.arff", dataset);
            LOGGER.log(Level.INFO, "Instances saved. Evaluating REPTree...");
            // Evaluation eval = new Evaluation(dataset);
            trep.buildClassifier(dataset);
            Reader.saveModelToFile(TProperties.repTreeModelName, trep);
            Reader.printClassifierModelToFile(trep, TProperties.repTreeModelName + ".txt");
        } catch (Exception ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        }
    }
    
    TREPTree(){
        loadModel();
        
    }
    
    private void loadModel(){
        try {
            String file = TProperties.tismaDirectory + "/models/" + TProperties.repTreeModelName;
            LOGGER.log(Level.FINE, "Loading JRIP MODEL from file: " + file);
            trep = (REPTree) weka.core.SerializationHelper.read(file);
        } catch (Exception ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        }
    }
}
