/*
 * Copyright (C) 2017 Lukas Lences
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package tismacore.helpers;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Stream;
import tismacore.Netflow;
import tismacore.TismaCore;
import weka.classifiers.Classifier;
import weka.classifiers.rules.JRip;
import weka.classifiers.trees.REPTree;
import weka.core.Instances;

/**
 *
 * @author Lukas Lences
 */
public class Reader {

    private final static Logger LOGGER = Logger.getLogger(TLogger.class.getName());

    public static ArrayList<String> readFilesInDirectory(String directory) {

        ArrayList<String> rv = new ArrayList<>();
        try (Stream<Path> paths = Files.walk(Paths.get(directory))) {
            paths.forEach(filePath -> {
                if (Files.isRegularFile(filePath)) {
                    rv.add(filePath.toString());
                }
            });
        } catch (IOException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        }
        return rv;
    }

    public static void checkDirectory(String path) {
        File directory = new File(String.valueOf(path));
        if (!directory.getParentFile().exists()) {
            checkDirectory(directory.getParent());
        }
        if (!directory.exists()) {
            directory.mkdir();
        }
    }

    public static void saveInstancesToFile(String label, Instances dataSet) {
        try {
            String pathToSave = TProperties.tismaDirectory + "/instances/";
            LOGGER.log(Level.FINE, "Saving instances to file: " + pathToSave + label);
            checkDirectory(pathToSave);
            BufferedWriter writer = new BufferedWriter(new FileWriter(pathToSave + label));
            writer.write(dataSet.toString());
            writer.flush();
            writer.close();
        } catch (IOException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        }
    }

    public static void saveModelToFile(String label, Object o) throws Exception {
        String pathToSave = TProperties.tismaDirectory + "/models/";
        checkDirectory(pathToSave);
        String fileName = pathToSave + "/" + label;
        weka.core.SerializationHelper.write(fileName, o);
        LOGGER.log(Level.INFO, label + " saved to file: " + fileName);
    }

    public static void printBotnetIpToFile(String inputFile) {
        LOGGER.log(Level.INFO, "Printing BotnetIP to file...");
        PrintWriter pw = null;
        try {
            pw = new PrintWriter(new FileOutputStream(new File(inputFile + ".TismaBotnetIP"),
                    true));
            Set<Map.Entry<String, Integer>> set = TismaCore.botnetIpaddrsMap.entrySet();
            for (Map.Entry<String, Integer> entry : set) {
                if (entry.getValue() > TProperties.kvantity) {
                    pw.append(entry.getKey() + "\n");
                }
            }
            pw.close();
        } catch (FileNotFoundException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        }
        LOGGER.log(Level.INFO, "Done");
    }

   public static void sendBotnetIpToQueue(String inputFile, HashSet<String> ips, String TW) {
        MQReader writer = new MQReader();
        LOGGER.log(Level.INFO, "Sending BotnetIP to MQ Broker...");
        writer.sendBotnetIps(ips, inputFile, TW);

        LOGGER.log(Level.INFO, "Done");
    }
        
    public static void sendBotnetIpToQueue(String inputFile, String TW) {
        MQReader writer = new MQReader();
        LOGGER.log(Level.INFO, "Sending BotnetIP to MQ Broker...");
        HashSet<String> ips = new HashSet<>();

        Set<Map.Entry<String, Integer>> set = TismaCore.botnetIpaddrsMap.entrySet();
        for (Map.Entry<String, Integer> entry : set) {
            if (entry.getValue() > TProperties.kvantity) {
                ips.add(entry.getKey());
            }
        }

        writer.sendBotnetIps(ips, inputFile, TW);

        LOGGER.log(Level.INFO, "Done");
    }

    public static void printClassifierModelToFile(REPTree o, String label) {
        LOGGER.log(Level.INFO, "Printing classifier model to file...");
        try {
            FileWriter writer = new FileWriter((new File(TProperties.tismaDirectory + "/models/" + label)));
            BufferedWriter bw;
            bw = new BufferedWriter(writer);
            bw.write(o.toString());
            bw.flush();
            bw.close();
        } catch (FileNotFoundException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        }
    }

    public static void printClassifierModelToFile(JRip o, String label) {
        LOGGER.log(Level.INFO, "Printing classifier model to file...");
        try {
            FileWriter writer = new FileWriter((new File(TProperties.tismaDirectory + "/models/" + label)));
            BufferedWriter bw;
            bw = new BufferedWriter(writer);
            bw.write(o.toString());
            bw.flush();
            bw.close();
        } catch (FileNotFoundException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        }
    }

    public static void printNetflowsToFile(ArrayList<Netflow> flows, String inputFile) {
        LOGGER.log(Level.INFO, "Printing labeled netflows to file...");
        PrintWriter pw = null;
        try {
            pw = new PrintWriter(new FileOutputStream(new File(inputFile + ".labeledByTisma"),
                    true));
            for (Netflow f : flows) {
                pw.append(f.content + "\n");
            }
            pw.close();
        } catch (FileNotFoundException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        }
        LOGGER.log(Level.INFO, "Done");
    }
}
