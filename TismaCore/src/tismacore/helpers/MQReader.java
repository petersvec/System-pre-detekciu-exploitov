/*
 * Copyright (C) 2017 Lukas Lences
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package tismacore.helpers;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.JMSException;
import javax.jms.MessageConsumer;
import javax.jms.MessageProducer;
import javax.jms.Queue;
import javax.jms.Session;
import javax.jms.TextMessage;
import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.activemq.ActiveMQSession;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;


/**
 *
 * @author Lukas Lences
 */
public class MQReader {
    private final static Logger LOGGER = Logger.getLogger(TLogger.class.getName());
    
    private String mqurl, destQueue;
    private Connection connection = null;
    private String msqIdPrefix;
    private MessageProducer producer;
    MessageConsumer consumer;
    ActiveMQSession session;
    Queue destination;
    
    MQReader(){
    try {
            mqurl = TProperties.mqbrokerUrl;
            destQueue = TProperties.botnetIpQueue;
            LOGGER.log(Level.INFO, "Trying connect to " + mqurl);
            LOGGER.log(Level.INFO, "Queue name: " + destQueue);
            
            ConnectionFactory factory = new ActiveMQConnectionFactory(mqurl);
            
            connection = factory.createConnection();
            connection.start();
            
            session = (ActiveMQSession) connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
            destination = session.createQueue(destQueue);
            producer = session.createProducer(destination);
            LOGGER.log(Level.INFO, "Connection established.");
        } catch (JMSException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        }
}
    
    public void sendBotnetIps(HashSet<String> zoznam, String subor, String timeWindow){
        try {
            JSONObject json = generateJson(zoznam, subor, timeWindow);
            TextMessage message = session.createTextMessage();
            String text = json.toJSONString();
            message.setText(text);
            LOGGER.log(Level.FINE, "MESSAGE: " + text);        
            producer.send(message);
            connection.close();
        } catch (JMSException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        }
    }
    
    public void closeconnection(){
        try {
            connection.close();
            LOGGER.log(Level.FINE, "CONNECTION CLOSED");
        } catch (JMSException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        }
    }
    
     public static JSONObject generateJson(HashSet<String> zoznam, String filename, String timeWindow) {
        JSONObject obj = new JSONObject();
        obj.put("source file", filename);
        obj.put("time window", timeWindow);

        JSONArray list = new JSONArray();
        for (String s : zoznam) {
            list.add(s);
        }
        obj.put("IP", list);
        
        return obj;
    }
     
     
     public MQReader(String netflowsQueue){
    try {
            mqurl = TProperties.mqbrokerUrl;
            destQueue = netflowsQueue;
            LOGGER.log(Level.INFO, "Trying connect to " + mqurl);
            LOGGER.log(Level.INFO, "Queue name: " + netflowsQueue);
            
            ConnectionFactory factory = new ActiveMQConnectionFactory(mqurl);
            
            connection = factory.createConnection();
            connection.start();
            
            session = (ActiveMQSession) connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
            destination = session.createQueue(destQueue);
            consumer = session.createConsumer(destination);
            LOGGER.log(Level.INFO, "Connection established.");
        } catch (JMSException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        }
}
     public void readNetflowFromQueue(String path){

        try {
            TextMessage msg = (TextMessage) consumer.receive();
            String name = msg.getStringProperty("FILE.NAME");
         String in = msg.getText();        
         
         FileWriter writer = new FileWriter((new File(path + "/" + name + ".unlabeled")));
            BufferedWriter bw;
            bw = new BufferedWriter(writer);
            bw.write(in);
            bw.flush();
            bw.close();
       
        connection.close();
        
        } catch (JMSException | IOException ex) {
            Logger.getLogger(MQReader.class.getName()).log(Level.SEVERE, null, ex);
        }         
    }
}
