/*
 * Copyright (C) 2017 Lukas Lences
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package tismacore.helpers;

import java.io.IOException;
import java.util.Date;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;


/**
 *
 * @author Lukas Lences
 */
public class TLogger {
    private final static Logger LOGGER = Logger.getLogger(TLogger.class.getName());
    private static FileHandler fileHandler;
    
    public static void setTLogger(){
        try {
            Reader.checkDirectory(TProperties.logDirectory);
            String pattern = TProperties.logDirectory + "/tisma.%g.log";
            fileHandler = new FileHandler(pattern, 10485796, 5, true);
            SimpleFormatter smf = new SimpleFormatter();

            fileHandler.setFormatter(new SimpleFormatter() {
                public String format(LogRecord record) {
                    Date t = new Date(System.currentTimeMillis());
                    return t + " - [" + record.getLevel() + "] "
                            + record.getSourceClassName() + " -- "
                            + record.getSourceMethodName() + " -- "
                            + record.getThreadID() + " -- "
                            + record.getMessage() + "\n";
                }
            });

            LOGGER.addHandler(fileHandler);
            LOGGER.setLevel(Level.parse(TProperties.logLevel));
            LOGGER.log(Level.CONFIG, "Logging was set to level " + TProperties.logLevel);
        } catch (IOException | SecurityException ex) {
            Logger.getLogger(TLogger.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
