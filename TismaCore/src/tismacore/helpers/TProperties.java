/*
 * Copyright (C) 2017 Lukas Lences
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package tismacore.helpers;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Lukas Lences
 */
public class TProperties {
    
    public static String mode, trainDirectory, runDirectory, logDirectory, logLevel, 
            mqbrokerUrl, botnetIpQueue, tismaDirectory, jripModelName, repTreeModelName,
            algorithm, netflowsQueue, netflowsTmpDir;
    public static  int timeWindowWidth, aggregationWindowWidth, executionSlots,
            semaphores, kvantity;
    public static double sensitivity;
    
    public static void setVariables(String pathToFile){
        try {
            Properties prop = new Properties();
            
            InputStream inputStream = new FileInputStream(pathToFile);
            prop.load(inputStream);
            mode = prop.getProperty("mode");
            timeWindowWidth = Integer.parseInt(prop.getProperty("time.window"));
            aggregationWindowWidth = Integer.parseInt(prop.getProperty("aggregation.window"));
            trainDirectory = prop.getProperty("train.dir");
            runDirectory = prop.getProperty("run.dir");
            sensitivity = Double.parseDouble(prop.getProperty("sensitivity"));           
            executionSlots=Integer.parseInt(prop.getProperty("numExecutionSlots"));           
            mqbrokerUrl= prop.getProperty("mqbroker.url");
            botnetIpQueue=prop.getProperty("botnetip.queue");
            netflowsQueue=prop.getProperty("netflows.queue");
            netflowsTmpDir=prop.getProperty("tmp.netflow.directory");
            tismaDirectory = prop.getProperty("tisma.dir");
            jripModelName = prop.getProperty("jrip.model.name");
            repTreeModelName = prop.getProperty("REPTree.model.name");
            semaphores= Integer.parseInt(prop.getProperty("semaphores"));
algorithm = prop.getProperty("evaluation.classification.algo");
            logDirectory = prop.getProperty("log.dir");
            logLevel = prop.getProperty("log.level");
            kvantity = Integer.parseInt(prop.getProperty("kvantity"));
            inputStream.close();            
            
        } catch (IOException ex) {
            Logger.getLogger(TProperties.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
