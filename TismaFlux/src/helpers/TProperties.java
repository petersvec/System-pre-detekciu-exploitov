/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package helpers;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;

/**
 *
 * @author Lukas Lences
 */
public class TProperties implements Runnable {
    public String propertyFile, logDirectory, logLevel, mqbrokerUrl,
            pcapQueue, fastFluxQueue,
            domainFluxQueue;
    public int fluxNumIPAddr, fluxNxDomainTimeout;
    public Thread t;
    
    public TProperties(String path){
        propertyFile = path;
        t = new Thread(this);
        t.start();
    }
    
    public void run(){
        try {
            Properties prop = new Properties();
            
            InputStream inputStream = new FileInputStream(propertyFile);
            prop.load(inputStream);      
            logDirectory = prop.getProperty("log.dir");
            logLevel = prop.getProperty("log.level");
            fluxNxDomainTimeout = parseTimeout(prop.getProperty("flux.nxdomain.timeout"));
            fluxNumIPAddr = Integer.parseInt(prop.getProperty("fast.flux.max.ip"));
            mqbrokerUrl= prop.getProperty("mqbroker.url");
            pcapQueue= prop.getProperty("query.queue.pcap");
            fastFluxQueue = prop.getProperty("reply.queue.fastflux");
            domainFluxQueue = prop.getProperty("reply.queue.domainflux");
            
            inputStream.close();
        } catch (IOException ex) {
            Logger.getLogger(TProperties.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }
    
    int parseTimeout(String var){        
        
        String[] pole = var.split(Pattern.quote("*"));
        int retVal = 1;
        if (pole.length == 0)
            return 60*60*1000;
        if (pole.length == 1)
            return Integer.parseInt(var);
        
        for (int i=0; i<pole.length; i++){
            retVal *= Integer.parseInt(pole[i]);
        }
        return retVal; 
    }
}
