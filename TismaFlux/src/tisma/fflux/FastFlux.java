/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tisma.fflux;

import helpers.TLogger;
import helpers.TParser;
import java.util.ArrayList;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.jms.JMSException;
import org.jnetpcap.packet.format.FormatUtils;
import static tisma.fflux.PcapParsing.dnsResponse;

/**
 *
 * @author Lukas Lences
 */
public class FastFlux implements Runnable{
    private final static Logger LOGGER = Logger.getLogger(TLogger.class.getName());
    public static ArrayList<String> domainsToAlarm;
    public static ArrayList<String> ipAddrsToAlarm;
    static Map<String, ArrayList<String>> domainWithIpaddresses;
    static int MAXIMUM_FAST_FLUX_IP;
    private String url;
    private String queue;
    private String filename;
    Thread t;
    
    FastFlux(int MAXIMUM_FAST_FLUX, Map<String, ArrayList<String>> records, String u, String q, String f) throws JMSException{
        domainsToAlarm = new ArrayList<>();
        domainWithIpaddresses = records;
        MAXIMUM_FAST_FLUX_IP = MAXIMUM_FAST_FLUX;
        url = u;
        queue = q;
        filename = f;
        t = new Thread(this);
        t.start();
    }
    
    public void run(){
        try {
            detectFastFlux();
            getInfectedByFastFlux();
            sendMessage();
        } catch (JMSException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        }
    }
    
    static void detectFastFlux() throws JMSException {
        
        
        String out = "Domains with more than " + MAXIMUM_FAST_FLUX_IP + " IP addresses:\n";
        LOGGER.log(Level.FINE, out);
        for (Map.Entry<String, ArrayList<String>> entry : domainWithIpaddresses.entrySet()) {
            String label = entry.getKey();
            ArrayList<String> ips = entry.getValue();
            out = "IP for: " + label + " -> ";
            for (String ipp : ips) {
                out += ipp + ", ";
            }
            LOGGER.log(Level.FINE, out);
            if(ips.size() > MAXIMUM_FAST_FLUX_IP){
                domainsToAlarm.add(label);
                LOGGER.log(Level.FINE, label);
            }
        }
    }
    
    void getInfectedByFastFlux(){
        ipAddrsToAlarm = new ArrayList<>();
        for (DnsResponse reply : dnsResponse) {
           if (reply.FLAGS.Rcode != 3) {
               for (Response r : reply.responses) {
                    if (r.type[1] == (byte) 0x01) {
                        //vsetky A zaznamy
                        String domena = r.name;
                        if (domainWithIpaddresses.containsKey(domena)){
                            if(!(ipAddrsToAlarm.contains(FormatUtils.ip(reply.dIP))))
                            ipAddrsToAlarm.add(FormatUtils.ip(reply.dIP));
                        }
                    }
               }
           }
        }
    } 
    
    void sendMessage() throws JMSException{
        if (domainsToAlarm.size() > 0){
            FluxToQueue.sendToFastFlux(url, TParser.generateJson(filename, 
                    "FAST-FLUX", domainsToAlarm, ipAddrsToAlarm), queue);
       }
    }
}
