/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tisma.fflux;

import helpers.TLogger;
import helpers.TProperties;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.jms.JMSException;
import javax.jms.JMSException;
import org.apache.commons.cli.*;

/**
 *
 * @author Lukas Lences
 */
public class TismaFlux {

    private final static Logger LOGGER = Logger.getLogger(TLogger.class.getName());
    static String configFile;

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws IOException, InterruptedException, JMSException {
        parseOptions(args);
        TProperties props = new TProperties(configFile);
        props.t.join();

        final int MAXIMUM_FAST_FLUX_IP = props.fluxNumIPAddr;
        final int MAXIMUM_TIME_NXDOMAIN = props.fluxNxDomainTimeout;

        TLogger.setTLogger(props.logDirectory, props.logLevel);
        LOGGER.log(Level.CONFIG, "Properties file: " + configFile);
        LOGGER.log(Level.CONFIG, "Log file: " + props.logDirectory);
        LOGGER.log(Level.CONFIG, "Maximum IP addresses for Fast Flux: " + MAXIMUM_FAST_FLUX_IP);
        LOGGER.log(Level.CONFIG, "Maximum timeout for NXDOMAIN for Domain Flux: " + MAXIMUM_TIME_NXDOMAIN);

        ReaderFromQueue reader = new ReaderFromQueue(props.mqbrokerUrl, props.pcapQueue);
        File tempFile;
        while ((tempFile = reader.readFile()) != null) {
            String tmpName = tempFile.getName();
            PcapParsing parsing = new PcapParsing(tempFile, MAXIMUM_FAST_FLUX_IP, MAXIMUM_TIME_NXDOMAIN);      
            parsing.t.join();
            reader.deleteFile(tempFile);

            DomainFlux dflux = new DomainFlux(MAXIMUM_TIME_NXDOMAIN, parsing.dnsErrorsResponse,
                    props.mqbrokerUrl, props.domainFluxQueue, tmpName);

            FastFlux fflux = new FastFlux(MAXIMUM_FAST_FLUX_IP, parsing.domainWithIpaddresses,
                    props.mqbrokerUrl, props.fastFluxQueue, tmpName);

            dflux.t.join();
            fflux.t.join();
        }
        reader.closeConnection();
    }

    static void parseOptions(String[] args) {
        Options options = new Options();
        CommandLineParser parser = new DefaultParser();
        HelpFormatter formatter = new HelpFormatter();
        CommandLine cmd;

        Option inputConfigFile = new Option("c", "config-file", true, "Config/properties file.");
        inputConfigFile.setRequired(true);
        options.addOption(inputConfigFile);

        try {
            cmd = parser.parse(options, args);

        } catch (ParseException ex) {
            System.out.println(ex.getMessage());
            formatter.printHelp("java -jar TismaFflux.jar -c tismaflux.properties", options);

            System.exit(1);
            return;
        }
        configFile = cmd.getOptionValue("config-file");
    }

}
