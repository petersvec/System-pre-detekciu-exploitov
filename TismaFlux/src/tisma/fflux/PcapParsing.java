/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tisma.fflux;

import helpers.TLogger;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Logger;
import javax.jms.JMSException;
import org.jnetpcap.Pcap;
import org.jnetpcap.PcapHeader;
import org.jnetpcap.nio.JBuffer;
import org.jnetpcap.nio.JMemory;
import org.jnetpcap.packet.JRegistry;
import org.jnetpcap.packet.PcapPacket;
import org.jnetpcap.packet.format.FormatUtils;
import org.jnetpcap.protocol.lan.Ethernet;
import org.jnetpcap.protocol.network.Icmp;
import org.jnetpcap.protocol.network.Ip4;
import org.jnetpcap.protocol.tcpip.Udp;

/**
 *
 * @author Lukas Lences
 */
public class PcapParsing implements Runnable{

    private final static Logger LOGGER = Logger.getLogger(TLogger.class.getName());

    static File tempFile;
    final StringBuilder errbuf;
    public static ArrayList<DnsResponse> dnsResponse;
    public static ArrayList<DnsResponse> dnsErrorsResponse;
    ArrayList<DnsQuery> dnsquery;
    public static Map<String, ArrayList<String>> domainWithIpaddresses;
    Thread t;

    public PcapParsing(File tf, int MAXIMUM_FAST_FLUX_IP, int MAXIMUM_TIME_NXDOMAIN) throws JMSException {
        tempFile = tf;
        domainWithIpaddresses = new HashMap();
        errbuf = new StringBuilder();
        dnsResponse = new ArrayList<>();
        dnsErrorsResponse = new ArrayList<>();
        dnsquery = new ArrayList<>();
        t = new Thread(this);
        t.start();
    }
    
    public void run(){

        Pcap pcap = Pcap.openOffline(tempFile.getAbsolutePath(), errbuf);
        
        if (pcap == null) {
            System.err.println(errbuf); // Error is stored in errbuf if any  
            return;
        }

        Ip4 ip = new Ip4();
        Icmp icmp = new Icmp();
        Udp udp = new Udp();
        Ethernet eth = new Ethernet();
        PcapHeader hdr = new PcapHeader(JMemory.POINTER);
        JBuffer buf = new JBuffer(JMemory.POINTER);
        int id = JRegistry.mapDLTToId(pcap.datalink());

        while (pcap.nextEx(hdr, buf) == Pcap.NEXT_EX_OK) {
            PcapPacket packet = new PcapPacket(hdr, buf);
            packet.scan(id);

            if (packet.hasHeader(eth) && packet.hasHeader(udp) && packet.hasHeader(ip) && !packet.hasHeader(icmp)) {

                if (udp.source() == 53) {
                    DnsResponse dnsReplyPacket = new DnsResponse(packet);
                    dnsResponse.add(dnsReplyPacket);

                } else if (udp.destination() == 53) {
                    DnsQuery dnsPacket = new DnsQuery(packet);
                    dnsquery.add(dnsPacket);
                }
            }
        }
        pcap.close();
        setIpAddressesPerDomain(); 
    }

    void setIpAddressesPerDomain() {
        for (DnsResponse reply : dnsResponse) {
            if (reply.FLAGS.Rcode != 3) {
                for (Response r : reply.responses) {
                    if (r.type[1] == (byte) 0x01) {
                        //vsetky A zaznamy                    
                        if (domainWithIpaddresses.containsKey(r.name)) {
                            ArrayList<String> ips = domainWithIpaddresses.get(r.name);
                            if (!ips.contains(FormatUtils.ip(r.address))) {
                                ips.add(FormatUtils.ip(r.address));
                            }
                        } else {
                            ArrayList<String> n = new ArrayList<>();
                            n.add(FormatUtils.ip(r.address));
                            domainWithIpaddresses.put(r.name, n);
                        }
                        // System.out.printf("ID: %s \tSRC: %s \tNAME: %s \tIP: %s%n", FormatUtils.asString(reply.ID), FormatUtils.ip(reply.dIP), r.name, FormatUtils.ip(r.address));
                    }
                }
            } else {
                // String errout = "ERROR: " + reply.responses.get(0).framenumber + " ID:" + FormatUtils.asString(reply.ID) + " Request from IP: " + FormatUtils.ip(reply.dIP) + " Requested domain: " + reply.QNAME.get(0) + " NO SUCH DOMAIN !!!\n";
                //System.err.printf("ID: %s \tSRC: %s\tNAME: %s NO SUCH DOMAIN%n", FormatUtils.asString(reply.ID), FormatUtils.ip(reply.dIP), reply.QNAME.get(0));
                dnsErrorsResponse.add(reply);
            }
        }
    }
}
