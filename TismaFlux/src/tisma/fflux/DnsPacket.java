/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tisma.fflux;

import java.util.ArrayList;
import java.util.Arrays;
import org.jnetpcap.packet.PcapPacket;
import org.jnetpcap.protocol.network.Ip4;
import org.jnetpcap.protocol.tcpip.Udp;
import helpers.TParser;

/**
 *
 * @author Lukas Lences
 */

class Flags {

    boolean QR; //0 - query, 1 - reply
    short Opcode; //0 - std query
    boolean AA;
    boolean TC;
    boolean RD;
    boolean RA;
    short Rcode;

    Flags(byte[] inputarray) {
        this.QR = (inputarray[0] & 0x80) == 0x80; //prvy bit -> 1000 0000 = 0x80
        this.Opcode = (short) ((inputarray[0] & 0x78) >> 3); //tj. nulovanie prveho bitu a posun o 3 doprava 
        this.AA = (inputarray[0] & 0x04) == 0x04; //AA bit
        this.TC = (inputarray[0] & 0x02) == 0x02; //TC bit
        this.RD = (inputarray[0] & 0x01) == 0x01; //RD bit
        this.RA = (inputarray[1] & 0x80) == 0x80; //RA bit
        //Z bity rezervovane
        this.Rcode = (short) (inputarray[1] & 0x0F); //RCode bity
    }
}

public class DnsPacket {
   static final int PREFIX = 12;

    //IP header
    byte[] dIP;
    byte[] sIP;
    //UDP header
    Udp udp;
    int sPort;
    int dPort;
    //DNS header
    byte[] ID;
    Flags FLAGS;    
    int QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT;    

    ArrayList<String> QNAME;
    int QTYPE;
    int QCLASS;
    
    DnsPacket(PcapPacket packet) {
        udp = new Udp();
        udp = packet.getHeader(udp);
        setAddresses(packet);
        setId();         
        setFlags();
        setCounts();
    }

    //ID
    private void setId() {
        this.ID = Arrays.copyOfRange(this.udp.getPayload(), 0, 2);
    }
    //FLAGS
    private void setFlags() {        
        this.FLAGS = new Flags(Arrays.copyOfRange(this.udp.getPayload(), 2, 4));
    }
    //COUNTS
    private void setCounts() {
        this.QDCOUNT = TParser.parseFrom2BytesToInt(Arrays.copyOfRange(this.udp.getPayload(), 4, 6));
        this.ANCOUNT = TParser.parseFrom2BytesToInt(Arrays.copyOfRange(this.udp.getPayload(), 6, 8));
        this.NSCOUNT = TParser.parseFrom2BytesToInt(Arrays.copyOfRange(this.udp.getPayload(), 8, 10));
        this.ARCOUNT = TParser.parseFrom2BytesToInt(Arrays.copyOfRange(this.udp.getPayload(), 10, 12));
    } 

    //ports and ip
    private void setAddresses(PcapPacket packet) {
        dIP = new byte[4];
        sIP = new byte[4];
        dIP = packet.getHeader(new Ip4()).destination();
        sIP = packet.getHeader(new Ip4()).source();
        this.sPort = this.udp.source();
        this.dPort = this.udp.destination();
    }
}
