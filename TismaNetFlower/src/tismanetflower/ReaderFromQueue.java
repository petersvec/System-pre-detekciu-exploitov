/*
 * Copyright (C) 2017 Lukas Lences
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package tismanetflower;

import helpers.TLogger;
import helpers.TProperties;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.JMSException;
import javax.jms.MessageConsumer;
import javax.jms.Queue;
import javax.jms.Session;
import org.apache.activemq.ActiveMQConnection;
import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.activemq.BlobMessage;

/**
 *
 * @author Lukas Lences
 */
public class ReaderFromQueue {
    private final static Logger LOGGER = Logger.getLogger(TLogger.class.getName());
    ConnectionFactory connectionFactory;
    Connection connection;
    Session session;
    Queue destination;
    MessageConsumer consumer;


    ReaderFromQueue(){
        try {
            
            LOGGER.log(Level.INFO, "Trying connect to " + TProperties.mqbrokerUrl);
            connectionFactory = new ActiveMQConnectionFactory(TProperties.mqbrokerUrl);
            connection = (ActiveMQConnection) connectionFactory.createConnection();
            connection.start();
            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
            destination = session.createQueue(TProperties.queue);
            consumer = session.createConsumer(destination);
            LOGGER.log(Level.INFO, "Connection established.");
        } catch (JMSException ex) {
           LOGGER.log(Level.SEVERE, null, ex);
        }
    }
    
 
    public File readFile() {        
        File tempFile = null;
        try{            
            LOGGER.log(Level.INFO, "Trying reading file...");
            BlobMessage blobMessage = (BlobMessage) consumer.receive();
            
            String dir = TProperties.workingDirectory;
            String PREFIX = blobMessage.getStringProperty("FILE.NAME");
          //  String SUFFIX = ".tmp";
            
            //tempFile = File.createTempFile(dir + PREFIX, SUFFIX);
            tempFile = new File(dir + PREFIX);
            tempFile.deleteOnExit();
            
            InputStream in = blobMessage.getInputStream();
            LOGGER.log(Level.INFO, "Saving file: " + PREFIX);
            try(FileOutputStream out = new FileOutputStream(tempFile)){
                byte[] buffer = new byte[1024];
                while(true){
                    int bytesRead = in.read(buffer);
                    if (bytesRead == -1) {
                        break;
                    }
                    
                    out.write(buffer, 0, bytesRead);
                }
                out.close();
            }            
        }   catch (JMSException | IOException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        } finally {
            return tempFile;
        }
    }
    
    public void closeConnection(){
        try {
            connection.close();
        } catch (JMSException ex) {
            Logger.getLogger(ReaderFromQueue.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void deleteFile(File tempFile){        
        tempFile.delete();
    }
}
