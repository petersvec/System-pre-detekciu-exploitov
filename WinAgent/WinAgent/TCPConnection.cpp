#include "TCPConnection.hpp"

std::unique_ptr<TCPConnection> tcpConnection;

void TCPConnection::establishConnection(const asio::ip::address &address, int port)
{
	asio::io_service io_service;
	asio::ip::tcp::endpoint endpoint(address, port);
	
	mSocket = std::make_unique<asio::ip::tcp::socket>(io_service);
	
	try {
		mSocket->connect(endpoint);
	}
	catch (std::exception &e)
	{
		std::cout << "Exception: " << e.what() << std::endl;
	}

	// ak sa podarilo spojit tak spustime vlakno na prijmanie sprav
	if (mSocket->is_open())
	{
		mThread = std::thread([this]() {
			auto socket = this->getSocket();

			while (true)
			{
				asio::error_code error;
				char buffer[1000];
				std::size_t bytesReceived{ 0 };

				bytesReceived = socket->read_some(asio::buffer(buffer), error);
				std::string message(buffer, bytesReceived);

				std::cout << "TCP: Received " << bytesReceived << " bytes!" << std::endl;

				// spracovanie spravy
				// ...
			}

			socket->close();
		});
	}
}