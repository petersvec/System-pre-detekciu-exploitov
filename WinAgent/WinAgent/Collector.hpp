#pragma once

#include <string>
#include <vector>
#include <fstream>
#include <asio.hpp>

// globalny zoznam kolektorov
class Collector;
extern std::vector<Collector> collectors;

class Configuration;

class Collector {
private:
	// ip adresa a port kolektora
	std::string mIPAddress;
	std::string mPort;

	// dalsie vlastnosti
	// TODO: prebrate z java collectora, treba este
	// zistit este co presne vsetky properties znamenaju vyhodit uz nepotrebne
	int mProtocol{ 1 };
	int mEvent{ 1 };
	std::string mSource{ "hadoopmaster-virtual-machine" };
	std::string mStreamName{ "skuska" };
	std::string mDataType{ "logs" };
	std::string mTags{ "cluster=\"agent\"" };
	std::string mDebuggingInfo{ "none" };
	long mSeqID{ 2 };
	int mRecordEndOffsets{ 1 };

	// timeout(v ms)
	DWORD mTimeout{ 5000 };

	// info o spustanom procese
	STARTUPINFO startupInfo;
	PROCESS_INFORMATION processInfo;

	// socket na spojenie s collectorom
	std::shared_ptr<asio::ip::tcp::socket> mSocket{ nullptr };

	std::shared_ptr<asio::io_service> io_service{ nullptr };

	// pripojenie sa 
	bool establishConnection();

	void closeHandles();

	// vytvorenie hlavicky
	std::string createHTTPHeader(long size) const;

public:
	Collector(const std::string &ip, const std::string &port);

	// nova verzia send funkcie, bez spustania procesu
	bool sendTo(const Configuration &configuration);
};