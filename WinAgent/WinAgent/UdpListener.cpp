#include "UdpListener.hpp"

void UdpListener::run()
{
	mThread = std::thread([]() {
		asio::io_service io_service;
		asio::error_code error;
		asio::ip::udp::socket udpSocket(io_service, asio::ip::udp::endpoint(asio::ip::udp::v4(), 8888));

		udpSocket.set_option(asio::socket_base::broadcast(true));
		asio::ip::udp::endpoint senderEndpoint;

		char buffer[1000];
		std::size_t bytesReceived{ 0 };
		bool messageReceived{ false };

		while (!messageReceived)
		{
			try {
				bytesReceived = udpSocket.receive_from(asio::buffer(buffer), senderEndpoint);
			}
			catch (std::exception &e)
			{
				std::cout << "Exception: " << e.what() << std::endl;
			}

			if (bytesReceived)
			{
				std::cout << "Received " << bytesReceived << " bytes!" << std::endl;
				std::string message(buffer, bytesReceived);
				std::cout << "Message: " << message << std::endl;

				if (message == "agentSearch")
				{
					messageReceived = true;
					udpSocket.close();
				}
			}
		}
	});
}

void UdpListener::join()
{
	mThread.join();
}