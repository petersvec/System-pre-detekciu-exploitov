#include "UdpListener.hpp"

void UdpListener::run()
{
	mThread = std::thread([]() {
		asio::io_service io_service;
		asio::error_code error;
		asio::ip::udp::socket udpSocket(io_service, asio::ip::udp::endpoint(asio::ip::udp::v4(), 1024));

		udpSocket.open(asio::ip::udp::v4(), error);

		if (!error)
		{
			udpSocket.set_option(asio::socket_base::broadcast(true));
			asio::ip::udp::endpoint senderEndpoint;

			char buffer[1000];
			std::size_t bytesReceived{ 0 };
			bool messageReceived{ false };

			while (!messageReceived)
			{
				//std::this_thread::sleep_for(std::chrono::milliseconds(1000));
				try {
					bytesReceived = udpSocket.receive_from(asio::buffer(buffer), senderEndpoint);
				}
				catch (std::exception &e)
				{
					std::cout << "Exception: " << e.what() << std::endl;
				}

				if (bytesReceived)
				{
					std::cout << "Received " << bytesReceived << " bytes!" << std::endl;
					std::cout << "Message: " << buffer << std::endl;
				}
			}

			//udpSocket.receive_from(asio::buffer(buffer), receiverEndpoint);
			//std::cout << "Received message: " << buffer << std::endl;
			//udpSocket.close();
		}
	});
}

void UdpListener::join()
{
	mThread.join();
}