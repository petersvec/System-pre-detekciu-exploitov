/*
 * Copyright (C) 2017 Lukas Lences
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package writertoqueue;

import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.JMSException;
import javax.jms.MessageProducer;
import javax.jms.Queue;
import javax.jms.Session;
import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.activemq.ActiveMQSession;
import org.apache.activemq.BlobMessage;

/**
 *
 * @author Lukas Lences
 */
public class WWriter {
    private final static Logger LOGGER = Logger.getLogger(WLogger.class.getName());

    private Connection connection = null;
    private String msqIdPrefix;
    ActiveMQSession session;
    Queue destination;
    MessageProducer producer;

    WWriter(){
        try {
            msqIdPrefix = WProperties.messageId;
            String url = WProperties.mqbrokerUrl + "?" + WProperties.mqbrokerBlobMessageParam;
            LOGGER.log(Level.INFO, "Trying connect to " + url);
            LOGGER.log(Level.INFO, "Queue name: " + WProperties.queue);
            ConnectionFactory factory = new ActiveMQConnectionFactory(url);
            
            connection = factory.createConnection();
            connection.start();
            
            session = (ActiveMQSession) connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
            destination = session.createQueue(WProperties.queue);
            producer = session.createProducer(destination);
            LOGGER.log(Level.INFO, "Connection established.");
        } catch (JMSException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        }
    }

    void sendFile(File file) {
        try {
            String messId = msqIdPrefix + file.getName();
            BlobMessage message = session.createBlobMessage(file);
            message.setStringProperty("FILE.NAME", file.getName()); //<- FILE.NAME property ocakavam, musi byt
            message.setLongProperty("FILE.SIZE", file.length()); //<- kvoli kontrole
            //message.setName("test1"); //<- mozno nejako lepsie odvadzat nazov
            message.setJMSMessageID(messId);            
            //message.setJMSPriority(1); //<- priorita zatial volitelna, podobne CorrelationID
            
            LOGGER.log(Level.INFO, "Sending file: " + file.getName());
            LOGGER.log(Level.FINE, "File size: " + file.length());
            LOGGER.log(Level.FINE, "Message ID: " + messId);
            
            producer.send(message);
        } catch (JMSException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        }
    }

    void closeConnection() {
        try {
            connection.close();
            LOGGER.log(Level.INFO, "Connection closed.");
        } catch (JMSException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        }
    }
}
