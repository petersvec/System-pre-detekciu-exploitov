#include "TCPServer.hpp"

TCPServer::TCPServer(int tcpPort)
{
	mPort = tcpPort;
	mService = std::make_unique<asio::io_service>();
	mAcceptor = std::make_unique<asio::ip::tcp::acceptor>(*mService, asio::ip::tcp::endpoint(asio::ip::tcp::v4(), mPort), true);
}

void TCPServer::run()
{
	mMainThread = std::thread([this]() {
		std::cout << "Listening on port " << this->getPort() << std::endl;

		while (true)
		{
			auto service = this->getService();
			auto acceptor = this->getAcceptor();

			// cakanie na spojenie
			std::unique_ptr<asio::ip::tcp::socket> newSocket = std::make_unique<asio::ip::tcp::socket>();
			acceptor->async_accept(*newSocket, [this, &newSocket]() {

			});
		}
	});
}

void TCPServer::join()
{
	mMainThread.join();
}